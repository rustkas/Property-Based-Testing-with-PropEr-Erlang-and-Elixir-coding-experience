decode_01_emulate_test() ->
    Expected = [[{"aaa", "zzz"}, {"bbb", "yyy"}, {"ccc", "xxx"}]],
    String = "aaa,bbb,ccc\r\nzzz,yyy,xxx",
    {Header, Rest} = decode_header(String),
    Rows = decode_rows(Rest),
    ZipLists = [lists:zip(Header, Row) || Row <- Rows],
    %TupleList = lists:flatten(ZipLists),
    ?assertEqual(Expected, ZipLists).

decode_02_emulate_test() ->
    Expected =
        [[{"header1", "aaa"}, {"header2", "bbb"}, {"header3", "ccc"}],
         [{"header1", "zzz"}, {"header2", "yyy"}, {"header3", "xxx"}]],
    String = "header1,header2,header3\r\naaa,bbb,ccc\r\nzzz,yyy,xxx",
    {Header, Rest} = decode_header(String),
    Rows = decode_rows(Rest),
    ZipLists = [lists:zip(Header, Row) || Row <- Rows],
    ?assertEqual(Expected, ZipLists).

decode_01_test() ->
    Expected =
        [[{"header1", "aaa"}, {"header2", "bbb"}, {"header3", "ccc"}],
         [{"header1", "zzz"}, {"header2", "yyy"}, {"header3", "xxx"}]],
    String = "header1,header2,header3\r\naaa,bbb,ccc\r\nzzz,yyy,xxx",
    Result = decode(String),
    ?assertEqual(Expected, Result).

decode_02_test() ->
    Expected =
        [[{"header1", "aaa"}, {"header1", "bbb"}, {"header2", "ccc"}],
         [{"header1", "zzz"}, {"header1", "yyy"}, {"header2", "xxx"}]],
    String = "header1,header1,header2\r\naaa,bbb,ccc\r\nzzz,yyy,xxx",
    Result = decode(String),
    ?assertEqual(Expected, Result).

decode_03_test() ->
    Expected = [[{[], []}, {[], []}, {[], []}], [{[], []}, {[], []}, {[], []}]],
    String = ",,\r\n,,\r\n,,",
    Result = decode(String),
    ?assertEqual(Expected, Result).

decode_04_test() ->
    Expected =
        [[{[], []}, {[], []}, {[], []}],
         [{[], []}, {[], []}, {[], []}],
         [{[], []}, {[], []}, {[], []}]],
    String = ",,\r\n,,\r\n,,\r\n,,",
    Result = decode(String),
    ?assertEqual(Expected, Result).
