rfc_record_per_line_test() ->
    Expected = [["zzz", "yyy", "xxx"]],
	
    Text = "aaa,bbb,ccc\r\nzzz,yyy,xxx\r\n",
    DataList = get_data_list(Text),
	
	Result = DataList,
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).

rfc_optional_trailing_crlf_test() ->
    Expected = [["zzz", "yyy", "xxx"]],
    Text = "aaa,bbb,ccc\r\nzzz,yyy,xxx",
    DataList = get_data_list(Text),
	
	Result = DataList,
	?assertEqual(Expected, Result).
	
rfc_double_quote_test() ->
    Expected = [["zzz", "yyy", "xxx"]],
    Text = "\"aaa\",\"bbb\",\"ccc\"\r\nzzz,yyy,xxx",
    DataList = get_data_list(Text),
	
	Result = DataList,
	?assertEqual(Expected, Result).
	
rfc_crlf_escape_test() ->
    Expected = [["zzz", "yyy", "xxx"]],
    Text = "\"aaa\",\"b\r\nbb\",\"ccc\"\r\nzzz,yyy,xxx",
    DataList = get_data_list(Text),
	
	Result = DataList,
	?assertEqual(Expected, Result).

rfc_double_quote_escape_test() ->
    Expected = [["", "", ""]],
    %% Since we decided headers are mandatory, this test adds a line
    %% with empty values (CLRF,,) to the example from the RFC.
    Text = "\"aaa\",\"b\"\"bb\",\"ccc\"\r\n,,",
    DataList = get_data_list(Text),
	
	Result = DataList,
	?assertEqual(Expected, Result).
	
dupe_keys_test() ->
    Expected = [["aaa", "bbb", "ccc"],["zzz", "yyy", "xxx"]],
	CSV = "field_name,field_name,field_name\r\n"
          "aaa,bbb,ccc\r\n"
          "zzz,yyy,xxx\r\n",
	Text = CSV,	  
	HeaderList = get_data_list(Text),
    
	Result = HeaderList,
	?assertEqual(Expected, Result).

%% Helper	
get_data_list(Text)->
    TunedText = tune_string(Text),
	SplittedText = split_text(TunedText),
	SplitMP = build_split_rows_mp(),
	RemoveUselessDoubleQuoteMP = build_remove_double_quote_mp(),
	
	DataList = get_data(SplittedText,SplitMP,RemoveUselessDoubleQuoteMP),
	DataList.
	