rfc_record_per_line_01_test() ->
    Expected = "aaa,bbb,ccc",
    Text = "aaa,bbb,ccc\r\nzzz,yyy,xxx\r\n",
	List = split_text(Text),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).
	%?debugFmt("~p~n",[List]),
	%?assertEqual(Expected, Result).

rfc_record_per_line_02_test() ->
    Expected = "zzz,yyy,xxx\r\n",
    Text = "aaa,bbb,ccc\r\nzzz,yyy,xxx\r\n",
	List = lists:reverse(split_text(Text)),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).

rfc_optional_trailing_crlf_01_test() ->
    Expected = "aaa,bbb,ccc",
    Text = "aaa,bbb,ccc\r\nzzz,yyy,xxx",
    List = split_text(Text),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).

rfc_optional_trailing_crlf_02_test() ->
    Expected = "zzz,yyy,xxx",
    Text = "aaa,bbb,ccc\r\nzzz,yyy,xxx",
    List = lists:reverse(split_text(Text)),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).
	
rfc_double_quote_01_test() ->
    Expected = "\"aaa\",\"bbb\",\"ccc\"",
    Text = "\"aaa\",\"bbb\",\"ccc\"\r\nzzz,yyy,xxx",
    List = split_text(Text),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).
	
rfc_double_quote_02_test() ->
    Expected = "zzz,yyy,xxx",
    Text = "\"aaa\",\"bbb\",\"ccc\"\r\nzzz,yyy,xxx",
    List = lists:reverse(split_text(Text)),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).	
	
rfc_crlf_escape_01_test() ->
    
	Expected = "\"aaa\",\"b\r\nbb\",\"ccc\"",
    Text = "\"aaa\",\"b\r\nbb\",\"ccc\"\r\nzzz,yyy,xxx",
	
	List = split_text(Text),
	Result = hd(List),
	%?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).
	%?debugFmt("~p~n",[List]),
	?assertEqual(Expected, Result).

rfc_crlf_escape_02_test() ->
    
	Expected = "zzz,yyy,xxx",
    Text = "\"aaa\",\"b\r\nbb\",\"ccc\"\r\nzzz,yyy,xxx",
	
	List = lists:reverse(split_text(Text)),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).
	
rfc_double_quote_escape_01_test() ->
    %% Since we decided headers are mandatory, this test adds a line
    %% with empty values (CLRF,,) to the example from the RFC.
    Expected = "\"aaa\",\"b\"\"bb\",\"ccc\"",
    Text = "\"aaa\",\"b\"\"bb\",\"ccc\"\r\n,,",
	
	List = split_text(Text),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).

rfc_double_quote_escape_02_test() ->
    %% Since we decided headers are mandatory, this test adds a line
    %% with empty values (CLRF,,) to the example from the RFC.
    Expected = ",,",
    Text = "\"aaa\",\"b\"\"bb\",\"ccc\"\r\n,,",
	
	List = lists:reverse(split_text(Text)),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).
	
dupe_keys_01_test() ->
    Expected = "field_name,field_name,field_name",
	CSV = "field_name,field_name,field_name\r\n"
          "aaa,bbb,ccc\r\n"
          "zzz,yyy,xxx\r\n",
	Text = CSV,	  
    
	List = split_text(Text),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).

dupe_keys_02_test() ->
    Expected = "aaa,bbb,ccc\r\n"
               "zzz,yyy,xxx\r\n",
	CSV = "field_name,field_name,field_name\r\n"
          "aaa,bbb,ccc\r\n"
          "zzz,yyy,xxx\r\n",
	Text = CSV,	  
    
	List = lists:reverse(split_text(Text)),
	Result = hd(List),
	?assertEqual(Expected, Result).
	%?debugFmt("~p~n",[Result]).	

shrink_01_01_test()->
	Expected = ",\r\n,\"",
    Text = ",\r\n,\"\r\n\"",
    List = split_text(Text),
	%?debugFmt("List = ~p~n",[List]),
	Result = hd(List),
	?assertEqual(Expected, Result).
	
shrink_01_02_test()->
	Expected = "\"",
    Text = ",\r\n,\"\r\n\"",
    List = lists:reverse(split_text(Text)),
	%?debugFmt("List = ~p~n",[List]),
	Result = hd(List),
	?assertEqual(Expected, Result).	